initialize() {
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", c(m1, m2), c(0.5, 0.5));
	// Genome size is up for consideration
	initializeGenomicElement(g1, 0, 100000);
	// Simplest case: 4 equally sized cromossomes, with some pretty high recombination
	initializeRecombinationRate(c(5e-6, 0.5, 5e-6, 0.5, 5e-6, 0.5, 5e-6), c(24999, 25000, 49999, 50000, 74999, 75000, 100000));
}

// create a population of 500 individuals
1 late() {
	setSeed(42);
	defineConstant("n_founders", 20);
	sim.readFromPopulationFile(filePath="/home/diogro/projects/HS_simulations/outputs/burnin.pop");
}

10050 early() {
	// set up pN to generate itself entirely from migrants
	sim.addSubpop(n_founders+1, 50000);
	rates = rep(1, n_founders);
	rates = rates/sum(rates);
	rates[0] = rates[0] + (1 - sum(rates));
	sim.subpopulations[n_founders].setMigrationRates(sim.subpopulations[0:(n_founders-1)], rates);
}
10050 late() {
	// remove the source subpopulations
	sim.subpopulations[n_founders].setMigrationRates(sim.subpopulations[0:(n_founders-1)], rep(0, n_founders));
	for (i in 0:(n_founders-1))
		sim.subpopulations[0].setSubpopulationSize(0);
}
10099 early() {
	// set up replicates
	sim.addSubpop(n_founders+2, 50000);
	sim.addSubpop(n_founders+3, 50000);
	sim.subpopulations[1].setMigrationRates(sim.subpopulations[0], 1);
	sim.subpopulations[2].setMigrationRates(sim.subpopulations[0], 1);
}
10099 late() {
	// Introduce selection	
	mut1 = sim.mutationsOfType(m1);
	n_mut1 = length(mut1);
	n_s1 = asInteger(n_mut1/5);
	s_1 = rbeta(n_s1, 1, 40);
	for(i in 0:(n_s1-1)){
		//mut1[i].setSelectionCoeff(s_1[i]);
	}
	mut2 = sim.mutationsOfType(m2);
	n_mut2 = length(mut2);
	n_s2 = asInteger(n_mut2/5);
	s_2 = rbeta(n_s2, 1, 40);
	for(i in 0:(n_s2-1)){
		mut2[i].setSelectionCoeff(s_2[i]);
	}
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_001_1.vcf");
	sim.subpopulations[1].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_001_2.vcf");
	sim.subpopulations[2].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_001_3.vcf");

}
10110 early() {
	sim.subpopulations[1].setMigrationRates(sim.subpopulations[0], 0);
	sim.subpopulations[2].setMigrationRates(sim.subpopulations[0], 0);
}

10110 late() {
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_010_1.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_010_2.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_010_3.vcf");
}
10120 late() {
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_020_1.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_020_2.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_020_3.vcf");
}
10130 late() {
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_030_1.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_030_2.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_030_3.vcf");
}
10140 late() {
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_040_1.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_040_2.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_040_3.vcf");
}
10150 late() {
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_050_1.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_050_2.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_050_3.vcf");
}
10160 late() {
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_060_1.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_060_2.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_060_3.vcf");
}
10170 late() {
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_070_1.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_070_2.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_070_3.vcf");
}
10180 late() {
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_080_1.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_080_2.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_080_3.vcf");
}
10190 late() {
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_090_1.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_090_2.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_090_3.vcf");
}
10200 late() {
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_100_1.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_100_2.vcf");
	sim.subpopulations[0].outputVCFSample(1000, filePath="~/projects/HS_simulations/outputs/ssC_100_3.vcf");
}
