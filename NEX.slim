initialize() {
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", c(m1, m2), c(0.5, 0.5));
	// Genome size is up for consideration
	initializeGenomicElement(g1, 0, 100000);
	// Simplest case: 4 equally sized cromossomes, with some pretty high recombination
	initializeRecombinationRate(c(1e-6, 0.5, 1e-6, 0.5, 1e-6, 0.5, 1e-6), c(24999, 25000, 49999, 50000, 74999, 75000, 100000));
}
1 {
	// How many founder populations? This just gets some independent polimorfisms for the selective part, probably not the best approach.
	// #n_founders (20) small (Ne = 100) populations acumulate some mutations. 
	defineConstant("n_founders", 20);
	for (i in 1:n_founders)
		sim.addSubpop(i, 200);
	for (i in 1:n_founders)
		for (j in 1:n_founders)
			if (i != j)
				sim.subpopulations[i-1].setMigrationRates(j, 0.0005);
}
9999 early() {
	// inbreed founders
	for (i in 1:n_founders)
		for (j in 1:n_founders)
			if (i != j)
				sim.subpopulations[i-1].setMigrationRates(j, 0.0);
	for (i in 0:(n_founders-1))
		sim.subpopulations[i].setSubpopulationSize(1);
}
//999 late() { sim.outputFull(); }
10050 early() {
	// set up pN to generate itself entirely from migrants
	sim.addSubpop(n_founders+1, 50000);
	rates = rep(1, n_founders);
	rates = rates/sum(rates);
	rates[0] = rates[0] + (1 - sum(rates));
	sim.subpopulations[n_founders].setMigrationRates(sim.subpopulations[0:(n_founders-1)], rates);
}
10050 late() {
	// remove the source subpopulations
	sim.subpopulations[n_founders].setMigrationRates(sim.subpopulations[0:(n_founders-1)], rep(0, n_founders));
	for (i in 0:(n_founders-1))
		sim.subpopulations[0].setSubpopulationSize(0);
}
10099 late() {
	// Introduce selection	
	mut = sim.mutationsOfType(m1);
	n_mut = length(mut);
	n_s = asInteger(n_mut);
	s = rbeta(n_s, 1, 20);
	for(i in 0:(n_s-1)){
		mut[i].setSelectionCoeff(s[i]);
	}

}
10200 late() { 
	sim.subpopulations[0].outputVCFSample(200, filePath="~/projects/HS_simulations/outputs/HS.vcf"); 
	}